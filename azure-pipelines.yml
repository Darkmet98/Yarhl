# Yarhl Build and Release pipeline
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

# Avoid building twice on PR (branch push + PR)
trigger:
  batch: true

steps:
# Prerequisites
- script: |
    SYMLINK=5_20_1
    MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
    echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
    echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
    echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
    mono --version
  displayName: '[MacOS] Enable Mono'
  condition: eq(variables['Agent.OS'], 'Darwin')

# Build
- script: echo $PATH && ./build.sh --verbosity=diagnostic --exclusive --target=Build
  displayName: '[Unix] Build'
  condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))

- powershell: .\build.ps1 --verbosity=diagnostic --exclusive --target=Build
  displayName: '[Windows] Build'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Run unit tests
- script: ./build.sh --verbosity=diagnostic --exclusive --target=Run-Unit-Tests
  displayName: '[Unix] Run unit tests'
  condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))

- powershell: .\build.ps1 --verbosity=diagnostic --exclusive --target=Run-Unit-Tests
  displayName: '[Windows] Run unit tests'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: 'TestResult.xml'
    testRunTitle: Yarhl Tests

# Analyze code coverage
- script: ./build.sh --verbosity=diagnostic --exclusive --target=Run-AltCover
  displayName: '[Unix] Analyze code coverage'
  condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin'))

- powershell: .\build.ps1 --verbosity=diagnostic --exclusive --target=Run-AltCover
  displayName: '[Windows] Analyze code coverage'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage results
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: coverage_report/Cobertura.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/coverage_report
    failIfCoverageEmpty: true

# Run Gendarme for QA
- script: ./build.sh --verbosity=diagnostic --exclusive --target=Run-Linter-Gendarme
  displayName: Analyze code quality with Gendarme
  condition: eq(variables['Agent.OS'], 'Linux')

# Run SonarQube for QA
- powershell: .\build.ps1 --verbosity=diagnostic --exclusive --target=Run-Sonar --pr-number=$(System.PullRequest.PullRequestNumber) --pr-base=$(System.PullRequest.SourceBranch) --pr-branch=$(System.PullRequest.TargetBranch)
  displayName: Analyze code quality with SonarQube
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Build the documentation
- script: ./build.sh --verbosity=diagnostic --exclusive --target=Build-Doc
  displayName: Build documentation
  condition: eq(variables['Agent.OS'], 'Linux')
