# Yarhl Build and Release pipeline
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    # Disabled MacOS build until Microsoft updates the mono version
    # The current mono version on the MacOS hosts doesn't support .NET 4.7.2
    # https://github.com/Microsoft/azure-pipelines-image-generation/issues/654
    # mac:
    #   imageName: 'macos-10.14'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

# Avoid building twice on PR (branch push + PR)
trigger:
  batch: true
  branches:
    exclude:
    - gh-pages

steps:
# Prerequisites
- script: |
    SYMLINK=5_20_1
    MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
    echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
    echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
    echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
  displayName: '[MacOS] Enable Mono'
  condition: eq(variables['Agent.OS'], 'Darwin')

# Run Cake
- script: ./build.sh --verbosity=diagnostic --target=CI-Linux
  displayName: '[Linux] Build, test and validate'
  condition: eq(variables['Agent.OS'], 'Linux')

- script: ./build.sh --verbosity=diagnostic --target=CI-MacOS
  displayName: '[MacOS] Build, test and validate'
  condition: eq(variables['Agent.OS'], 'Darwin')

- powershell: .\build.ps1 --verbosity=diagnostic --target=CI-Windows --pr-number=$(System.PullRequest.PullRequestNumber) --pr-base=$(System.PullRequest.SourceBranch) --pr-branch=$(System.PullRequest.TargetBranch)
  displayName: '[Windows] Build, test and validate'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  env:
    SONAR_TOKEN: $(SONAR_TOKEN)

# Integrate results in Azure DevOps
- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: 'TestResult.xml'
    testRunTitle: Yarhl Tests

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage results
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage_report/Cobertura.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/coverage_report
    failIfCoverageEmpty: true

# Publish artifacts
- task: PublishPipelineArtifact@0
  displayName: '[Linux] Publish NuGet artifacts'
  inputs:
    artifactName: 'Yarhl NuGet'
    targetPath: artifacts/
  condition: eq(variables['Agent.OS'], 'Linux')

- task: PublishPipelineArtifact@0
  displayName: '[Linux] Publish doc artifacts'
  inputs:
    artifactName: 'Documentation'
    targetPath: docs/_site/
  condition: eq(variables['Agent.OS'], 'Linux')
