R: Gendarme.Rules.Portability.MonoCompatibilityReviewRule
# Gendarme detects that Type.Equals is not implemented in Mono but this doesn't seem to be the case
M: System.Boolean Libgame.FileFormat.Format/<Convert>c__AnonStorey0::<>m__1(System.Type)
M: System.Boolean Libgame.FileFormat.Format::<ConvertWith>m__0(System.Type)
M: System.Boolean Libgame.FileFormat.Format/<ConvertWith>c__AnonStorey0::<>m__0(System.Type)
M: System.Boolean Libgame.FileFormat.Format/<ConvertWith>c__AnonStorey1::<>m__0(System.Type)

R: Gendarme.Rules.Design.Generic.AvoidMethodWithUnusedGenericTypeRule
# We want to convert by specifying the type in a generic
M: Libgame.FileSystem.Node Libgame.FileSystem.Node::Transform(System.Boolean,System.Object)
M: Libgame.FileSystem.Node Libgame.FileSystem.Node::Transform(System.Boolean)

R: Gendarme.Rules.Design.ListsAreStronglyTypedRule
# It looks like a bug in Gendarme
# It makes no sense for a ReadOnlyCollection that furthermore is strongly type because of the generic
T: Libgame.FileSystem.NavegableNodeCollection`1

R: Gendarme.Rules.Correctness.EnsureLocalDisposalRule
# It's a factory, we are creating the objects
M: Libgame.FileSystem.Node Libgame.FileSystem.NodeFactory::FromFile(System.String,System.String)
M: Libgame.FileSystem.Node Libgame.FileSystem.NodeFactory::FromDirectory(System.String,System.String)

R: Gendarme.Rules.Maintainability.AvoidUnnecessarySpecializationRule
# In this case it is not possible since one of the methods creates a derived type.
M: System.Void Libgame.FileSystem.NodeFactory::CreateContainersForChild(Libgame.FileSystem.Node,System.String,Libgame.FileSystem.Node)

